# This is a basic workflow to help you get started with Actions

name: jhonata-devs2blu-action

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  
  workflow_dispatch:

env:
  # isto não é necessario apenas saiba que existe! 
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'us-east-1'


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Create S3 Bucket
        run: |
          aws s3api create-bucket --bucket jhonata-terraform-state --region us-east-1

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Setup SSH Keys
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub
          ssh-keyscan github.com >> ~/.ssh/known_hosts
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: fase

      - name: Qual diretorio estou
        run: pwd && ls -la && ls -la ~/.ssh
      
      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="create_key=false"


      - name: Wait for instance to be ready
        run: sleep 80  # waits for 60 seconds
      
      - name: Wait for instance to be ready
        run: |
          status="pending"
          while [[ "$status" == "pending" ]]; do
            response=$(curl -s -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
                      "https://api.github.com/repos/${{github.repository}}/commits/${{github.sha}}/check-runs")
            check_runs_count=$(echo "$response" | jq -r '.total_count')
            
            if [[ "$check_runs_count" -gt 0 ]]; then
              status=$(echo "$response" | jq -r '.check_runs[] | select(.name == "jhonata-devs2blu-action") | .status')
              
              if [[ "$status" == "pending" ]]; then
                echo "Status check is still pending, waiting..."
                sleep 10
              fi
            else
              echo "No status checks found, waiting..."
              sleep 10
            fi
          done
        timeout-minutes: 30

Neste código, primeiro verificamos se existem verificações de status disponíveis usando o campo total_count na resposta JSON da API. Se não houver verificações de status, esperamos 10 segundos antes de verificar novamente. Se houver verificações de status, verificamos o status da verificação "jhonata-devs2blu-action" e aguardamos até que ele não seja mais "pending" ou até que o tempo limite de 30 minutos seja atingido.

Isso deve evitar o erro de iteração sobre um JSON vazio e garantir que o fluxo de trabalho espere de forma adequada até que o status check seja bem-sucedido.


      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Ansible
        run: pip install ansible

      - name: Set INSTANCE_IP environment variable
        run: echo "instance_ip=`terraform output -raw instance_ip`" >> $GITHUB_ENV

      - name: Create Ansible Inventory
        run: |
          echo "[jhonata_vm_actions]" > inventory.ini
          echo "${instance_ip}" >> inventory.ini
          echo "" >> inventory.ini
          cat inventory.ini

      - name: Setup SSH Keys depois do Ansible
        run: |
          ssh-keyscan ${instance_ip} >> ~/.ssh/known_hosts
          ls -la ~/.ssh
          cat ~/.ssh/known_hosts

      - name: Run Ansible Playbook
        run: ansible-playbook -i inventory.ini playbook.yml
        
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Cleanup Resources
        if: failure()  # Executa apenas se a etapa anterior falhar
        run: |
          terraform destroy -auto-approve -target=aws_key_pair.keypair_jhonata_actions
          terraform destroy -auto-approve -target=aws_security_group.security_group_jhonata_actions
          terraform destroy -auto-approve  # Destruir outras recursos, se necessário

